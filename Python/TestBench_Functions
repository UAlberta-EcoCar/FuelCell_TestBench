#from GetData import * #import everything from GetData(which is a class from a file)
from TestBench_GPIO_Constants import *
from TestBench_GPIO_Functions import *
import time

global repress_delay
global delay_timer1
global delay_timer2

def FC_standby():
    if (pin_value_get_dig(START)):
        #nothing
    else:
        #make sure fuel cell stays off
        #supply valve closed
        pin_value_set_dig(H2_VALVE, 0)
        #purge valve closed
        pin_value_set_dig(PURGE_VALVE, 0)
        #relays open ##is this 0 or 1?
        pin_value_set_dig(MOTOR_RELAY, 0)
        pin_value_set_dig(RESISTOR_RELAY, 0)
        pin_value_set_dig(CAP_RELAY, 0)

        FC_state = FC_STATE_STANDBY
    return FC_state

def FC_startup_h2():
    #open supply valve
    pin_value_set_dig(H2_VALVE, 1)
    #purge valve closed
    pin_value_set_dig(PURGE_VALVE, 0)
    #relays open
    pin_value_set_dig(STARTUP_RELAY, 1)
    pin_value_set_dig(MOTOR_RELAY, 1)
    pin_value_set_dig(RESISTOR_RELAY, 1)
    pin_value_set_dig(CAP_RELAY, 1)

    #input h2 until voltage reaches 30
    if (get_FCVOLT() < 30000):
        #loop back into same state
        FC_state = FC_STATE_STARTUP_H2
    else:
        #voltage is 30 then go to start up purge
        FC_state = FC_STATE_STARTUP_PURGE
    return FC_state

def FC_startup_purge():
    #h2 valve still open
    pin_value_set_dig(H2_VALVE, 1)
    #close startup relay
    if (1): #help
        pin_value_set_dig(STARTUP_RELAY, 0)
    #motor relay still open
    pin_value_set_dig(MOTOR_RELAY, 1)
    #RES relay open
    pin_value_set_dig(RESISTOR_RELAY, 1)
    #CAP relay still open
    pin_value_set_dig(CAP_RELAY, 1)

    #open purge valve and start timer
    if (1):#help
        purge_timer = time.clock()

    pin_value_set_dig(PURGE_VALVE, 1)

    #wait 3 seconds before changing state
    if (time.clock() - purge_timer < 3000):
        FC_state = FC_STATE_STARTUP_PURGE
    else:
        #close purge valuve
        pin_value_set_dig(PURGE_VALVE, 0)
        #supply valve still open
        pin_value_set_dig(H2_VALVE, 0)
        #open all relays
        pin_value_set_dig(STARTUP_RELAY, 1)
        pin_value_set_dig(RESISTOR_RELAY, 1)
        pin_value_set_dig(MOTOR_RELAY, 1)
        pin_value_set_dig(CAP_RELAY, 1)

        delay_timer1 = time.clock()

        repress_delay = time.clock()
        #change state to repressurized delay
        FC_state = FC_STATE_REPRESSURIZE
    return FC_state

def FC_repressurize():
    FC_state = FC_STATE_REPRESSURIZE
    if (time.clock() - repress_delay > 1000):
        FC_state = FC_STATE_STARTUP_CHARGE
    return FC_state

#some weird code in C file here, help
#continue from here
def FC_startup_charge():
    if (millis() - delay_timer1 < 1000):
        return FC_state
    if (get_CAPVOLT() < charge_thres):
        #some stuff
        delay_timer2 = millis()
    else:
        charge_thres = 33000
        if (millis() - delay_timer2 < 2000):
            return FC_STATE_STARTUP_CHARGE
        if (millis() - delay_timer2 < 4000):
            return FC_STATE_STARTUP_CHARGE

        FC_state = FC_STATE_RUN

    return FC_state

def FC_run():
    #some more stuff
    FC_state = FC_STATE_RUN
    return FC_state

def FC_shutdown():
    if (0):
        FC_state = FC_STATE_STANDBY
    else:
        FC_state = FC_STATE_SHUTDOWN

    return FC_state

def FC_alarm():
    FC_state = FC_STATE_ALARM
    return FC_state